MAIN ::= STMT
MAIN ::= FLIST
MAIN ::= ''

FLIST ::= FDEF FLIST
FLIST ::= FDEF

FDEF ::= def id(PARLIST){STMTLIST}

PARLIST ::= int id, PARLIST
PARLIST ::= int id
PARLIST ::= ''

VARLIST ::= id, VARLIST
VARLIST ::= id

STMT ::= int VARLIST;
STMT ::= ATRIBST;
STMT ::= PRINTST;
STMT ::= RETURNST;
STMT ::= IFSTMT
STMT ::= {STMTLIST}
STMT ::= ;

ATRIBST ::= id = EXPR
ATRIBST ::= id = FCALL

FCALL ::= id(PARLISTCALL)

PARLISTCALL ::= id, PARLISTCALL
PARLISTCALL ::= id
PARLISTCALL ::= ''

PRINTST ::= print EXPR

RETURNST ::= return id
RETURNST ::= return

IFSTMT ::= if(EXPR) {STMT} else {STMT}
IFSTMT ::= if(EXPR) {STMT}

STMTLIST ::= STMT STMTLIST
STMTLIST ::= STMT

EXPR ::= NUMEXPR < NUMEXPR
EXPR ::= NUMEXPR <= NUMEXPR
EXPR ::= NUMEXPR > NUMEXPR
EXPR ::= NUMEXPR >= NUMEXPR
EXPR ::= NUMEXPR == NUMEXPR
EXPR ::= NUMEXPR != NUMEXPR
EXPR ::= NUMEXPR

NUMEXPR ::= NUMEXPR + TERM
NUMEXPR ::= NUMEXPR - TERM
NUMEXPR ::= TERM

TERM ::= TERM * FACTOR
TERM ::= TERM / FACTOR
TERM ::= FACTOR

FACTOR ::= num
FACTOR ::= (NUMEXPR)
FACTOR ::= id
